// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `crypto.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ScryptKdf {
    // message fields
    pub dklen: u32,
    pub salt: ::std::vec::Vec<u8>,
    pub n: u32,
    pub r: u32,
    pub p: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScryptKdf {
    fn default() -> &'a ScryptKdf {
        <ScryptKdf as ::protobuf::Message>::default_instance()
    }
}

impl ScryptKdf {
    pub fn new() -> ScryptKdf {
        ::std::default::Default::default()
    }

    // uint32 dklen = 1;


    pub fn get_dklen(&self) -> u32 {
        self.dklen
    }
    pub fn clear_dklen(&mut self) {
        self.dklen = 0;
    }

    // Param is passed by value, moved
    pub fn set_dklen(&mut self, v: u32) {
        self.dklen = v;
    }

    // bytes salt = 2;


    pub fn get_salt(&self) -> &[u8] {
        &self.salt
    }
    pub fn clear_salt(&mut self) {
        self.salt.clear();
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::vec::Vec<u8>) {
        self.salt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.salt
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.salt, ::std::vec::Vec::new())
    }

    // uint32 n = 3;


    pub fn get_n(&self) -> u32 {
        self.n
    }
    pub fn clear_n(&mut self) {
        self.n = 0;
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: u32) {
        self.n = v;
    }

    // uint32 r = 4;


    pub fn get_r(&self) -> u32 {
        self.r
    }
    pub fn clear_r(&mut self) {
        self.r = 0;
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: u32) {
        self.r = v;
    }

    // uint32 p = 5;


    pub fn get_p(&self) -> u32 {
        self.p
    }
    pub fn clear_p(&mut self) {
        self.p = 0;
    }

    // Param is passed by value, moved
    pub fn set_p(&mut self, v: u32) {
        self.p = v;
    }
}

impl ::protobuf::Message for ScryptKdf {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dklen = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.salt)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.n = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.r = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.p = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dklen != 0 {
            my_size += ::protobuf::rt::value_size(1, self.dklen, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.salt.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.salt);
        }
        if self.n != 0 {
            my_size += ::protobuf::rt::value_size(3, self.n, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.r != 0 {
            my_size += ::protobuf::rt::value_size(4, self.r, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.p != 0 {
            my_size += ::protobuf::rt::value_size(5, self.p, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dklen != 0 {
            os.write_uint32(1, self.dklen)?;
        }
        if !self.salt.is_empty() {
            os.write_bytes(2, &self.salt)?;
        }
        if self.n != 0 {
            os.write_uint32(3, self.n)?;
        }
        if self.r != 0 {
            os.write_uint32(4, self.r)?;
        }
        if self.p != 0 {
            os.write_uint32(5, self.p)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScryptKdf {
        ScryptKdf::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dklen",
                |m: &ScryptKdf| { &m.dklen },
                |m: &mut ScryptKdf| { &mut m.dklen },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "salt",
                |m: &ScryptKdf| { &m.salt },
                |m: &mut ScryptKdf| { &mut m.salt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "n",
                |m: &ScryptKdf| { &m.n },
                |m: &mut ScryptKdf| { &mut m.n },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "r",
                |m: &ScryptKdf| { &m.r },
                |m: &mut ScryptKdf| { &mut m.r },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "p",
                |m: &ScryptKdf| { &m.p },
                |m: &mut ScryptKdf| { &mut m.p },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScryptKdf>(
                "ScryptKdf",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static ScryptKdf {
        static instance: ::protobuf::rt::LazyV2<ScryptKdf> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScryptKdf::new)
    }
}

impl ::protobuf::Clear for ScryptKdf {
    fn clear(&mut self) {
        self.dklen = 0;
        self.salt.clear();
        self.n = 0;
        self.r = 0;
        self.p = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScryptKdf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScryptKdf {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Pbkdf2 {
    // message fields
    pub dklen: u32,
    pub c: u32,
    pub prf: PrfType,
    pub salt: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pbkdf2 {
    fn default() -> &'a Pbkdf2 {
        <Pbkdf2 as ::protobuf::Message>::default_instance()
    }
}

impl Pbkdf2 {
    pub fn new() -> Pbkdf2 {
        ::std::default::Default::default()
    }

    // uint32 dklen = 1;


    pub fn get_dklen(&self) -> u32 {
        self.dklen
    }
    pub fn clear_dklen(&mut self) {
        self.dklen = 0;
    }

    // Param is passed by value, moved
    pub fn set_dklen(&mut self, v: u32) {
        self.dklen = v;
    }

    // uint32 c = 2;


    pub fn get_c(&self) -> u32 {
        self.c
    }
    pub fn clear_c(&mut self) {
        self.c = 0;
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: u32) {
        self.c = v;
    }

    // .emerald.vault.PrfType prf = 3;


    pub fn get_prf(&self) -> PrfType {
        self.prf
    }
    pub fn clear_prf(&mut self) {
        self.prf = PrfType::PRF_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_prf(&mut self, v: PrfType) {
        self.prf = v;
    }

    // bytes salt = 4;


    pub fn get_salt(&self) -> &[u8] {
        &self.salt
    }
    pub fn clear_salt(&mut self) {
        self.salt.clear();
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::vec::Vec<u8>) {
        self.salt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.salt
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.salt, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Pbkdf2 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dklen = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.c = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.prf, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.salt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dklen != 0 {
            my_size += ::protobuf::rt::value_size(1, self.dklen, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.c != 0 {
            my_size += ::protobuf::rt::value_size(2, self.c, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prf != PrfType::PRF_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.prf);
        }
        if !self.salt.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.salt);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dklen != 0 {
            os.write_uint32(1, self.dklen)?;
        }
        if self.c != 0 {
            os.write_uint32(2, self.c)?;
        }
        if self.prf != PrfType::PRF_UNKNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.prf))?;
        }
        if !self.salt.is_empty() {
            os.write_bytes(4, &self.salt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pbkdf2 {
        Pbkdf2::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dklen",
                |m: &Pbkdf2| { &m.dklen },
                |m: &mut Pbkdf2| { &mut m.dklen },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "c",
                |m: &Pbkdf2| { &m.c },
                |m: &mut Pbkdf2| { &mut m.c },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PrfType>>(
                "prf",
                |m: &Pbkdf2| { &m.prf },
                |m: &mut Pbkdf2| { &mut m.prf },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "salt",
                |m: &Pbkdf2| { &m.salt },
                |m: &mut Pbkdf2| { &mut m.salt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pbkdf2>(
                "Pbkdf2",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Pbkdf2 {
        static instance: ::protobuf::rt::LazyV2<Pbkdf2> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pbkdf2::new)
    }
}

impl ::protobuf::Clear for Pbkdf2 {
    fn clear(&mut self) {
        self.dklen = 0;
        self.c = 0;
        self.prf = PrfType::PRF_UNKNOWN;
        self.salt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pbkdf2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pbkdf2 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Encrypted {
    // message fields
    pub field_type: Encrypted_CipherType,
    pub secret: ::std::vec::Vec<u8>,
    pub iv: ::std::vec::Vec<u8>,
    pub mac: ::protobuf::SingularPtrField<Mac>,
    // message oneof groups
    pub kdf_type: ::std::option::Option<Encrypted_oneof_kdf_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Encrypted {
    fn default() -> &'a Encrypted {
        <Encrypted as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Encrypted_oneof_kdf_type {
    kdf_scrypt(ScryptKdf),
    kdf_pbkdf(Pbkdf2),
}

impl Encrypted {
    pub fn new() -> Encrypted {
        ::std::default::Default::default()
    }

    // .emerald.vault.Encrypted.CipherType type = 1;


    pub fn get_field_type(&self) -> Encrypted_CipherType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Encrypted_CipherType::CIPHER_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Encrypted_CipherType) {
        self.field_type = v;
    }

    // bytes secret = 2;


    pub fn get_secret(&self) -> &[u8] {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.secret, ::std::vec::Vec::new())
    }

    // bytes iv = 3;


    pub fn get_iv(&self) -> &[u8] {
        &self.iv
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.iv
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.iv, ::std::vec::Vec::new())
    }

    // .emerald.vault.Mac mac = 4;


    pub fn get_mac(&self) -> &Mac {
        self.mac.as_ref().unwrap_or_else(|| <Mac as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mac(&mut self) {
        self.mac.clear();
    }

    pub fn has_mac(&self) -> bool {
        self.mac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mac(&mut self, v: Mac) {
        self.mac = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac(&mut self) -> &mut Mac {
        if self.mac.is_none() {
            self.mac.set_default();
        }
        self.mac.as_mut().unwrap()
    }

    // Take field
    pub fn take_mac(&mut self) -> Mac {
        self.mac.take().unwrap_or_else(|| Mac::new())
    }

    // .emerald.vault.ScryptKdf kdf_scrypt = 5;


    pub fn get_kdf_scrypt(&self) -> &ScryptKdf {
        match self.kdf_type {
            ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(ref v)) => v,
            _ => <ScryptKdf as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_kdf_scrypt(&mut self) {
        self.kdf_type = ::std::option::Option::None;
    }

    pub fn has_kdf_scrypt(&self) -> bool {
        match self.kdf_type {
            ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kdf_scrypt(&mut self, v: ScryptKdf) {
        self.kdf_type = ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kdf_scrypt(&mut self) -> &mut ScryptKdf {
        if let ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(_)) = self.kdf_type {
        } else {
            self.kdf_type = ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(ScryptKdf::new()));
        }
        match self.kdf_type {
            ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kdf_scrypt(&mut self) -> ScryptKdf {
        if self.has_kdf_scrypt() {
            match self.kdf_type.take() {
                ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(v)) => v,
                _ => panic!(),
            }
        } else {
            ScryptKdf::new()
        }
    }

    // .emerald.vault.Pbkdf2 kdf_pbkdf = 6;


    pub fn get_kdf_pbkdf(&self) -> &Pbkdf2 {
        match self.kdf_type {
            ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(ref v)) => v,
            _ => <Pbkdf2 as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_kdf_pbkdf(&mut self) {
        self.kdf_type = ::std::option::Option::None;
    }

    pub fn has_kdf_pbkdf(&self) -> bool {
        match self.kdf_type {
            ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kdf_pbkdf(&mut self, v: Pbkdf2) {
        self.kdf_type = ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kdf_pbkdf(&mut self) -> &mut Pbkdf2 {
        if let ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(_)) = self.kdf_type {
        } else {
            self.kdf_type = ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(Pbkdf2::new()));
        }
        match self.kdf_type {
            ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kdf_pbkdf(&mut self) -> Pbkdf2 {
        if self.has_kdf_pbkdf() {
            match self.kdf_type.take() {
                ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(v)) => v,
                _ => panic!(),
            }
        } else {
            Pbkdf2::new()
        }
    }
}

impl ::protobuf::Message for Encrypted {
    fn is_initialized(&self) -> bool {
        for v in &self.mac {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Encrypted_oneof_kdf_type::kdf_scrypt(ref v)) = self.kdf_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Encrypted_oneof_kdf_type::kdf_pbkdf(ref v)) = self.kdf_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.secret)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.iv)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mac)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kdf_type = ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_scrypt(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kdf_type = ::std::option::Option::Some(Encrypted_oneof_kdf_type::kdf_pbkdf(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Encrypted_CipherType::CIPHER_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.secret);
        }
        if !self.iv.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.iv);
        }
        if let Some(ref v) = self.mac.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.kdf_type {
            match v {
                &Encrypted_oneof_kdf_type::kdf_scrypt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Encrypted_oneof_kdf_type::kdf_pbkdf(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Encrypted_CipherType::CIPHER_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.secret.is_empty() {
            os.write_bytes(2, &self.secret)?;
        }
        if !self.iv.is_empty() {
            os.write_bytes(3, &self.iv)?;
        }
        if let Some(ref v) = self.mac.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.kdf_type {
            match v {
                &Encrypted_oneof_kdf_type::kdf_scrypt(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Encrypted_oneof_kdf_type::kdf_pbkdf(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Encrypted {
        Encrypted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Encrypted_CipherType>>(
                "type",
                |m: &Encrypted| { &m.field_type },
                |m: &mut Encrypted| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "secret",
                |m: &Encrypted| { &m.secret },
                |m: &mut Encrypted| { &mut m.secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "iv",
                |m: &Encrypted| { &m.iv },
                |m: &mut Encrypted| { &mut m.iv },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Mac>>(
                "mac",
                |m: &Encrypted| { &m.mac },
                |m: &mut Encrypted| { &mut m.mac },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScryptKdf>(
                "kdf_scrypt",
                Encrypted::has_kdf_scrypt,
                Encrypted::get_kdf_scrypt,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Pbkdf2>(
                "kdf_pbkdf",
                Encrypted::has_kdf_pbkdf,
                Encrypted::get_kdf_pbkdf,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Encrypted>(
                "Encrypted",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Encrypted {
        static instance: ::protobuf::rt::LazyV2<Encrypted> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Encrypted::new)
    }
}

impl ::protobuf::Clear for Encrypted {
    fn clear(&mut self) {
        self.field_type = Encrypted_CipherType::CIPHER_UNKNOWN;
        self.secret.clear();
        self.iv.clear();
        self.mac.clear();
        self.kdf_type = ::std::option::Option::None;
        self.kdf_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Encrypted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Encrypted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Encrypted_CipherType {
    CIPHER_UNKNOWN = 0,
    CIPHER_AES128_CTR = 1,
}

impl ::protobuf::ProtobufEnum for Encrypted_CipherType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Encrypted_CipherType> {
        match value {
            0 => ::std::option::Option::Some(Encrypted_CipherType::CIPHER_UNKNOWN),
            1 => ::std::option::Option::Some(Encrypted_CipherType::CIPHER_AES128_CTR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Encrypted_CipherType] = &[
            Encrypted_CipherType::CIPHER_UNKNOWN,
            Encrypted_CipherType::CIPHER_AES128_CTR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Encrypted_CipherType>("Encrypted.CipherType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Encrypted_CipherType {
}

impl ::std::default::Default for Encrypted_CipherType {
    fn default() -> Self {
        Encrypted_CipherType::CIPHER_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Encrypted_CipherType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Mac {
    // message fields
    pub field_type: Mac_MacType,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mac {
    fn default() -> &'a Mac {
        <Mac as ::protobuf::Message>::default_instance()
    }
}

impl Mac {
    pub fn new() -> Mac {
        ::std::default::Default::default()
    }

    // .emerald.vault.Mac.MacType type = 1;


    pub fn get_field_type(&self) -> Mac_MacType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Mac_MacType::MAC_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Mac_MacType) {
        self.field_type = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Mac {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Mac_MacType::MAC_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Mac_MacType::MAC_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mac {
        Mac::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Mac_MacType>>(
                "type",
                |m: &Mac| { &m.field_type },
                |m: &mut Mac| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Mac| { &m.value },
                |m: &mut Mac| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Mac>(
                "Mac",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Mac {
        static instance: ::protobuf::rt::LazyV2<Mac> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Mac::new)
    }
}

impl ::protobuf::Clear for Mac {
    fn clear(&mut self) {
        self.field_type = Mac_MacType::MAC_UNKNOWN;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mac {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mac {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Mac_MacType {
    MAC_UNKNOWN = 0,
    MAC_WEB3 = 1,
}

impl ::protobuf::ProtobufEnum for Mac_MacType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Mac_MacType> {
        match value {
            0 => ::std::option::Option::Some(Mac_MacType::MAC_UNKNOWN),
            1 => ::std::option::Option::Some(Mac_MacType::MAC_WEB3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Mac_MacType] = &[
            Mac_MacType::MAC_UNKNOWN,
            Mac_MacType::MAC_WEB3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Mac_MacType>("Mac.MacType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Mac_MacType {
}

impl ::std::default::Default for Mac_MacType {
    fn default() -> Self {
        Mac_MacType::MAC_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Mac_MacType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PrfType {
    PRF_UNKNOWN = 0,
    PRF_HMAC_SHA256 = 1,
}

impl ::protobuf::ProtobufEnum for PrfType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PrfType> {
        match value {
            0 => ::std::option::Option::Some(PrfType::PRF_UNKNOWN),
            1 => ::std::option::Option::Some(PrfType::PRF_HMAC_SHA256),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PrfType] = &[
            PrfType::PRF_UNKNOWN,
            PrfType::PRF_HMAC_SHA256,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PrfType>("PrfType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PrfType {
}

impl ::std::default::Default for PrfType {
    fn default() -> Self {
        PrfType::PRF_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for PrfType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccrypto.proto\x12\remerald.vault\"_\n\tScryptKdf\x12\x14\n\x05dklen\
    \x18\x01\x20\x01(\rR\x05dklen\x12\x12\n\x04salt\x18\x02\x20\x01(\x0cR\
    \x04salt\x12\x0c\n\x01n\x18\x03\x20\x01(\rR\x01n\x12\x0c\n\x01r\x18\x04\
    \x20\x01(\rR\x01r\x12\x0c\n\x01p\x18\x05\x20\x01(\rR\x01p\"j\n\x06Pbkdf2\
    \x12\x14\n\x05dklen\x18\x01\x20\x01(\rR\x05dklen\x12\x0c\n\x01c\x18\x02\
    \x20\x01(\rR\x01c\x12(\n\x03prf\x18\x03\x20\x01(\x0e2\x16.emerald.vault.\
    PrfTypeR\x03prf\x12\x12\n\x04salt\x18\x04\x20\x01(\x0cR\x04salt\"\xc8\
    \x02\n\tEncrypted\x127\n\x04type\x18\x01\x20\x01(\x0e2#.emerald.vault.En\
    crypted.CipherTypeR\x04type\x12\x16\n\x06secret\x18\x02\x20\x01(\x0cR\
    \x06secret\x12\x0e\n\x02iv\x18\x03\x20\x01(\x0cR\x02iv\x12$\n\x03mac\x18\
    \x04\x20\x01(\x0b2\x12.emerald.vault.MacR\x03mac\x129\n\nkdf_scrypt\x18\
    \x05\x20\x01(\x0b2\x18.emerald.vault.ScryptKdfH\0R\tkdfScrypt\x124\n\tkd\
    f_pbkdf\x18\x06\x20\x01(\x0b2\x15.emerald.vault.Pbkdf2H\0R\x08kdfPbkdf\"\
    7\n\nCipherType\x12\x12\n\x0eCIPHER_UNKNOWN\x10\0\x12\x15\n\x11CIPHER_AE\
    S128_CTR\x10\x01B\n\n\x08kdf_type\"u\n\x03Mac\x12.\n\x04type\x18\x01\x20\
    \x01(\x0e2\x1a.emerald.vault.Mac.MacTypeR\x04type\x12\x14\n\x05value\x18\
    \x02\x20\x01(\x0cR\x05value\"(\n\x07MacType\x12\x0f\n\x0bMAC_UNKNOWN\x10\
    \0\x12\x0c\n\x08MAC_WEB3\x10\x01*/\n\x07PrfType\x12\x0f\n\x0bPRF_UNKNOWN\
    \x10\0\x12\x13\n\x0fPRF_HMAC_SHA256\x10\x01J\x9d\x0b\n\x06\x12\x04\0\0/\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x16\n\
    \n\n\x02\x04\0\x12\x04\x03\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\
    \x11\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x04\x15\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x04\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x0b\x10\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x13\x14\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x05\x04\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\x04\t\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x05\n\x0e\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x05\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x04\x11\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x06\x0b\x0c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x0f\
    \x10\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x04\x11\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\x0b\
    \x0c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07\x0f\x10\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\x08\x04\x11\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x08\
    \x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x08\x0b\x0c\n\x0c\n\x05\x04\
    \0\x02\x04\x03\x12\x03\x08\x0f\x10\n\n\n\x02\x04\x01\x12\x04\x0b\0\x10\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\x0b\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x0c\x04\x15\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0c\x04\n\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x0c\x13\x14\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\r\x04\x11\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\r\x0b\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\r\x0f\
    \x10\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0e\x04\x14\n\x0c\n\x05\x04\x01\
    \x02\x02\x06\x12\x03\x0e\x04\x0b\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x0e\x0c\x0f\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0e\x12\x13\n\x0b\n\
    \x04\x04\x01\x02\x03\x12\x03\x0f\x04\x13\n\x0c\n\x05\x04\x01\x02\x03\x05\
    \x12\x03\x0f\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0f\n\x0e\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0f\x11\x12\n\n\n\x02\x05\0\x12\
    \x04\x12\0\x15\x01\n\n\n\x03\x05\0\x01\x12\x03\x12\x05\x0c\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\x13\x04\x14\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x13\
    \x04\x0f\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x13\x12\x13\n\x0b\n\x04\x05\
    \0\x02\x01\x12\x03\x14\x04\x18\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x14\
    \x04\x13\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x14\x16\x17\n\n\n\x02\x04\
    \x02\x12\x04\x17\0%\x01\n\n\n\x03\x04\x02\x01\x12\x03\x17\x08\x11\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x03\x18\x04\x18\n\x0c\n\x05\x04\x02\x02\0\x06\
    \x12\x03\x18\x04\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x18\x0f\x13\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x18\x16\x17\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03\x19\x04\x15\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x19\x04\
    \t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x19\n\x10\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x19\x13\x14\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1a\
    \x04\x11\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1a\x04\t\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x1a\n\x0c\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x1a\x0f\x10\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1b\x04\x10\n\
    \x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\x1b\x04\x07\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03\x1b\x08\x0b\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\
    \x1b\x0e\x0f\n\x0c\n\x04\x04\x02\x08\0\x12\x04\x1c\x04\x1f\x05\n\x0c\n\
    \x05\x04\x02\x08\0\x01\x12\x03\x1c\n\x12\n\x0b\n\x04\x04\x02\x02\x04\x12\
    \x03\x1d\x08!\n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03\x1d\x08\x11\n\x0c\
    \n\x05\x04\x02\x02\x04\x01\x12\x03\x1d\x12\x1c\n\x0c\n\x05\x04\x02\x02\
    \x04\x03\x12\x03\x1d\x1f\x20\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x1e\x08\
    \x1d\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x03\x1e\x08\x0e\n\x0c\n\x05\x04\
    \x02\x02\x05\x01\x12\x03\x1e\x0f\x18\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\
    \x03\x1e\x1b\x1c\n\x0c\n\x04\x04\x02\x04\0\x12\x04!\x04$\x05\n\x0c\n\x05\
    \x04\x02\x04\0\x01\x12\x03!\t\x13\n\r\n\x06\x04\x02\x04\0\x02\0\x12\x03\
    \"\x08\x19\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x03\"\x08\x16\n\x0e\n\
    \x07\x04\x02\x04\0\x02\0\x02\x12\x03\"\x17\x18\n\r\n\x06\x04\x02\x04\0\
    \x02\x01\x12\x03#\x08\x1c\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x03#\
    \x08\x19\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03#\x1a\x1b\n\n\n\
    \x02\x04\x03\x12\x04'\0/\x01\n\n\n\x03\x04\x03\x01\x12\x03'\x08\x0b\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03(\x04\x15\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03(\x04\x0b\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\x0c\x10\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03(\x13\x14\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03)\x04\x14\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03)\x04\t\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03)\n\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03)\x12\x13\n\x0c\n\x04\x04\x03\x04\0\x12\x04+\x04.\x05\n\x0c\n\x05\
    \x04\x03\x04\0\x01\x12\x03+\t\x10\n\r\n\x06\x04\x03\x04\0\x02\0\x12\x03,\
    \x08\x18\n\x0e\n\x07\x04\x03\x04\0\x02\0\x01\x12\x03,\x08\x13\n\x0e\n\
    \x07\x04\x03\x04\0\x02\0\x02\x12\x03,\x16\x17\n\r\n\x06\x04\x03\x04\0\
    \x02\x01\x12\x03-\x08\x15\n\x0e\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x03-\
    \x08\x10\n\x0e\n\x07\x04\x03\x04\0\x02\x01\x02\x12\x03-\x13\x14b\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
