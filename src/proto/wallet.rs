// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `wallet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Wallet {
    // message fields
    pub file_type: super::common::FileType,
    pub id: ::std::vec::Vec<u8>,
    pub label: ::std::string::String,
    pub hd_accounts: ::protobuf::RepeatedField<Reserved>,
    pub entries: ::protobuf::RepeatedField<WalletEntry>,
    pub entry_seq: u32,
    pub created_at: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Wallet {
    fn default() -> &'a Wallet {
        <Wallet as ::protobuf::Message>::default_instance()
    }
}

impl Wallet {
    pub fn new() -> Wallet {
        ::std::default::Default::default()
    }

    // .emerald.vault.FileType file_type = 1;


    pub fn get_file_type(&self) -> super::common::FileType {
        self.file_type
    }
    pub fn clear_file_type(&mut self) {
        self.file_type = super::common::FileType::FILE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_file_type(&mut self, v: super::common::FileType) {
        self.file_type = v;
    }

    // bytes id = 2;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // string label = 3;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated .emerald.vault.Reserved hd_accounts = 4;


    pub fn get_hd_accounts(&self) -> &[Reserved] {
        &self.hd_accounts
    }
    pub fn clear_hd_accounts(&mut self) {
        self.hd_accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_hd_accounts(&mut self, v: ::protobuf::RepeatedField<Reserved>) {
        self.hd_accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hd_accounts(&mut self) -> &mut ::protobuf::RepeatedField<Reserved> {
        &mut self.hd_accounts
    }

    // Take field
    pub fn take_hd_accounts(&mut self) -> ::protobuf::RepeatedField<Reserved> {
        ::std::mem::replace(&mut self.hd_accounts, ::protobuf::RepeatedField::new())
    }

    // repeated .emerald.vault.WalletEntry entries = 5;


    pub fn get_entries(&self) -> &[WalletEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<WalletEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<WalletEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<WalletEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // uint32 entry_seq = 6;


    pub fn get_entry_seq(&self) -> u32 {
        self.entry_seq
    }
    pub fn clear_entry_seq(&mut self) {
        self.entry_seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_entry_seq(&mut self, v: u32) {
        self.entry_seq = v;
    }

    // uint64 created_at = 7;


    pub fn get_created_at(&self) -> u64 {
        self.created_at
    }
    pub fn clear_created_at(&mut self) {
        self.created_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: u64) {
        self.created_at = v;
    }
}

impl ::protobuf::Message for Wallet {
    fn is_initialized(&self) -> bool {
        for v in &self.hd_accounts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.file_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.hd_accounts)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.entry_seq = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.created_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.file_type != super::common::FileType::FILE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.file_type);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.label);
        }
        for value in &self.hd_accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.entry_seq != 0 {
            my_size += ::protobuf::rt::value_size(6, self.entry_seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.created_at != 0 {
            my_size += ::protobuf::rt::value_size(7, self.created_at, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.file_type != super::common::FileType::FILE_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.file_type))?;
        }
        if !self.id.is_empty() {
            os.write_bytes(2, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(3, &self.label)?;
        }
        for v in &self.hd_accounts {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.entries {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.entry_seq != 0 {
            os.write_uint32(6, self.entry_seq)?;
        }
        if self.created_at != 0 {
            os.write_uint64(7, self.created_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Wallet {
        Wallet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::FileType>>(
                "file_type",
                |m: &Wallet| { &m.file_type },
                |m: &mut Wallet| { &mut m.file_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &Wallet| { &m.id },
                |m: &mut Wallet| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &Wallet| { &m.label },
                |m: &mut Wallet| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Reserved>>(
                "hd_accounts",
                |m: &Wallet| { &m.hd_accounts },
                |m: &mut Wallet| { &mut m.hd_accounts },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WalletEntry>>(
                "entries",
                |m: &Wallet| { &m.entries },
                |m: &mut Wallet| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "entry_seq",
                |m: &Wallet| { &m.entry_seq },
                |m: &mut Wallet| { &mut m.entry_seq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "created_at",
                |m: &Wallet| { &m.created_at },
                |m: &mut Wallet| { &mut m.created_at },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Wallet>(
                "Wallet",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Wallet {
        static instance: ::protobuf::rt::LazyV2<Wallet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Wallet::new)
    }
}

impl ::protobuf::Clear for Wallet {
    fn clear(&mut self) {
        self.file_type = super::common::FileType::FILE_UNKNOWN;
        self.id.clear();
        self.label.clear();
        self.hd_accounts.clear();
        self.entries.clear();
        self.entry_seq = 0;
        self.created_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Wallet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Wallet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Reserved {
    // message fields
    pub seed_id: ::std::vec::Vec<u8>,
    pub account_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Reserved {
    fn default() -> &'a Reserved {
        <Reserved as ::protobuf::Message>::default_instance()
    }
}

impl Reserved {
    pub fn new() -> Reserved {
        ::std::default::Default::default()
    }

    // bytes seed_id = 1;


    pub fn get_seed_id(&self) -> &[u8] {
        &self.seed_id
    }
    pub fn clear_seed_id(&mut self) {
        self.seed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_seed_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.seed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seed_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seed_id
    }

    // Take field
    pub fn take_seed_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seed_id, ::std::vec::Vec::new())
    }

    // uint32 account_id = 2;


    pub fn get_account_id(&self) -> u32 {
        self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u32) {
        self.account_id = v;
    }
}

impl ::protobuf::Message for Reserved {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seed_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.account_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seed_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.seed_id);
        }
        if self.account_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.account_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seed_id.is_empty() {
            os.write_bytes(1, &self.seed_id)?;
        }
        if self.account_id != 0 {
            os.write_uint32(2, self.account_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Reserved {
        Reserved::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "seed_id",
                |m: &Reserved| { &m.seed_id },
                |m: &mut Reserved| { &mut m.seed_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "account_id",
                |m: &Reserved| { &m.account_id },
                |m: &mut Reserved| { &mut m.account_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Reserved>(
                "Reserved",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static Reserved {
        static instance: ::protobuf::rt::LazyV2<Reserved> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Reserved::new)
    }
}

impl ::protobuf::Clear for Reserved {
    fn clear(&mut self) {
        self.seed_id.clear();
        self.account_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Reserved {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Reserved {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WalletEntry {
    // message fields
    pub id: u32,
    pub blockchain_id: u32,
    pub receive_disabled: bool,
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    pub label: ::std::string::String,
    pub created_at: u64,
    // message oneof groups
    pub pk_type: ::std::option::Option<WalletEntry_oneof_pk_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WalletEntry {
    fn default() -> &'a WalletEntry {
        <WalletEntry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum WalletEntry_oneof_pk_type {
    hd_path(super::seed::SeedHD),
    pk_id(::std::vec::Vec<u8>),
}

impl WalletEntry {
    pub fn new() -> WalletEntry {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // uint32 blockchain_id = 2;


    pub fn get_blockchain_id(&self) -> u32 {
        self.blockchain_id
    }
    pub fn clear_blockchain_id(&mut self) {
        self.blockchain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockchain_id(&mut self, v: u32) {
        self.blockchain_id = v;
    }

    // bool receive_disabled = 3;


    pub fn get_receive_disabled(&self) -> bool {
        self.receive_disabled
    }
    pub fn clear_receive_disabled(&mut self) {
        self.receive_disabled = false;
    }

    // Param is passed by value, moved
    pub fn set_receive_disabled(&mut self, v: bool) {
        self.receive_disabled = v;
    }

    // .emerald.vault.Address address = 5;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // string label = 6;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // .emerald.vault.SeedHD hd_path = 7;


    pub fn get_hd_path(&self) -> &super::seed::SeedHD {
        match self.pk_type {
            ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(ref v)) => v,
            _ => <super::seed::SeedHD as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_hd_path(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_hd_path(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hd_path(&mut self, v: super::seed::SeedHD) {
        self.pk_type = ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hd_path(&mut self) -> &mut super::seed::SeedHD {
        if let ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(super::seed::SeedHD::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hd_path(&mut self) -> super::seed::SeedHD {
        if self.has_hd_path() {
            match self.pk_type.take() {
                ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(v)) => v,
                _ => panic!(),
            }
        } else {
            super::seed::SeedHD::new()
        }
    }

    // bytes pk_id = 8;


    pub fn get_pk_id(&self) -> &[u8] {
        match self.pk_type {
            ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_pk_id(&mut self) {
        self.pk_type = ::std::option::Option::None;
    }

    pub fn has_pk_id(&self) -> bool {
        match self.pk_type {
            ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pk_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.pk_type = ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pk_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(_)) = self.pk_type {
        } else {
            self.pk_type = ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(::std::vec::Vec::new()));
        }
        match self.pk_type {
            ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pk_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_pk_id() {
            match self.pk_type.take() {
                ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // uint64 created_at = 9;


    pub fn get_created_at(&self) -> u64 {
        self.created_at
    }
    pub fn clear_created_at(&mut self) {
        self.created_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: u64) {
        self.created_at = v;
    }
}

impl ::protobuf::Message for WalletEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(WalletEntry_oneof_pk_type::hd_path(ref v)) = self.pk_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.blockchain_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.receive_disabled = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(WalletEntry_oneof_pk_type::hd_path(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk_type = ::std::option::Option::Some(WalletEntry_oneof_pk_type::pk_id(is.read_bytes()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.created_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.blockchain_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.blockchain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receive_disabled != false {
            my_size += 2;
        }
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.label);
        }
        if self.created_at != 0 {
            my_size += ::protobuf::rt::value_size(9, self.created_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &WalletEntry_oneof_pk_type::hd_path(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WalletEntry_oneof_pk_type::pk_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(8, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.blockchain_id != 0 {
            os.write_uint32(2, self.blockchain_id)?;
        }
        if self.receive_disabled != false {
            os.write_bool(3, self.receive_disabled)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.label.is_empty() {
            os.write_string(6, &self.label)?;
        }
        if self.created_at != 0 {
            os.write_uint64(9, self.created_at)?;
        }
        if let ::std::option::Option::Some(ref v) = self.pk_type {
            match v {
                &WalletEntry_oneof_pk_type::hd_path(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WalletEntry_oneof_pk_type::pk_id(ref v) => {
                    os.write_bytes(8, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WalletEntry {
        WalletEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &WalletEntry| { &m.id },
                |m: &mut WalletEntry| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "blockchain_id",
                |m: &WalletEntry| { &m.blockchain_id },
                |m: &mut WalletEntry| { &mut m.blockchain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "receive_disabled",
                |m: &WalletEntry| { &m.receive_disabled },
                |m: &mut WalletEntry| { &mut m.receive_disabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "address",
                |m: &WalletEntry| { &m.address },
                |m: &mut WalletEntry| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &WalletEntry| { &m.label },
                |m: &mut WalletEntry| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::seed::SeedHD>(
                "hd_path",
                WalletEntry::has_hd_path,
                WalletEntry::get_hd_path,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "pk_id",
                WalletEntry::has_pk_id,
                WalletEntry::get_pk_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "created_at",
                |m: &WalletEntry| { &m.created_at },
                |m: &mut WalletEntry| { &mut m.created_at },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WalletEntry>(
                "WalletEntry",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static WalletEntry {
        static instance: ::protobuf::rt::LazyV2<WalletEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WalletEntry::new)
    }
}

impl ::protobuf::Clear for WalletEntry {
    fn clear(&mut self) {
        self.id = 0;
        self.blockchain_id = 0;
        self.receive_disabled = false;
        self.address.clear();
        self.label.clear();
        self.pk_type = ::std::option::Option::None;
        self.pk_type = ::std::option::Option::None;
        self.created_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WalletEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WalletEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cwallet.proto\x12\remerald.vault\x1a\raddress.proto\x1a\nseed.proto\
    \x1a\x0ccommon.proto\"\x90\x02\n\x06Wallet\x124\n\tfile_type\x18\x01\x20\
    \x01(\x0e2\x17.emerald.vault.FileTypeR\x08fileType\x12\x0e\n\x02id\x18\
    \x02\x20\x01(\x0cR\x02id\x12\x14\n\x05label\x18\x03\x20\x01(\tR\x05label\
    \x128\n\x0bhd_accounts\x18\x04\x20\x03(\x0b2\x17.emerald.vault.ReservedR\
    \nhdAccounts\x124\n\x07entries\x18\x05\x20\x03(\x0b2\x1a.emerald.vault.W\
    alletEntryR\x07entries\x12\x1b\n\tentry_seq\x18\x06\x20\x01(\rR\x08entry\
    Seq\x12\x1d\n\ncreated_at\x18\x07\x20\x01(\x04R\tcreatedAt\"B\n\x08Reser\
    ved\x12\x17\n\x07seed_id\x18\x01\x20\x01(\x0cR\x06seedId\x12\x1d\n\nacco\
    unt_id\x18\x02\x20\x01(\rR\taccountId\"\xa8\x02\n\x0bWalletEntry\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\rR\x02id\x12#\n\rblockchain_id\x18\x02\x20\x01\
    (\rR\x0cblockchainId\x12)\n\x10receive_disabled\x18\x03\x20\x01(\x08R\
    \x0freceiveDisabled\x120\n\x07address\x18\x05\x20\x01(\x0b2\x16.emerald.\
    vault.AddressR\x07address\x12\x14\n\x05label\x18\x06\x20\x01(\tR\x05labe\
    l\x120\n\x07hd_path\x18\x07\x20\x01(\x0b2\x15.emerald.vault.SeedHDH\0R\
    \x06hdPath\x12\x15\n\x05pk_id\x18\x08\x20\x01(\x0cH\0R\x04pkId\x12\x1d\n\
    \ncreated_at\x18\t\x20\x01(\x04R\tcreatedAtB\t\n\x07pk_typeJ\x9a\x11\n\
    \x06\x12\x04\0\09\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x16\n\t\n\x02\x03\0\x12\x03\x02\0\x17\n\t\n\x02\x03\x01\
    \x12\x03\x03\0\x14\n\t\n\x02\x03\x02\x12\x03\x04\0\x16\n\xa5\x01\n\x02\
    \x04\0\x12\x04\x08\0\x1b\x01\x1a\x98\x01\x20Wallet\x20is\x20a\x20group\
    \x20of\x20entries\x20used\x20together.\x20An\x20entry\x20may\x20be\x20a\
    \x20private\x20key\x20for\x20a\x20single\x20address,\n\x20or\x20a\x20gro\
    up\x20of\x20addresses\x20specified\x20by\x20HDPath\x20on\x20a\x20Seed\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \t\x04\x1b\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\t\x04\x0c\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\t\r\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x19\
    \x1a\n\x13\n\x04\x04\0\x02\x01\x12\x03\x0b\x04\x11\x1a\x06\x20UUID\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x04\t\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x0b\n\x0c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x0f\x10\
    \n\"\n\x04\x04\0\x02\x02\x12\x03\r\x04\x15\x1a\x15\x20User\x20assigned\
    \x20label\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\r\x04\n\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\r\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\r\x13\x14\n\x9c\x01\n\x04\x04\0\x02\x03\x12\x03\x11\x04&\x1a\x8e\
    \x01\x20List\x20of\x20HDPath\x20accounts\x20that\x20belongs\x20to\x20the\
    \x20wallet,\x20used\x20to\x20automate\x20finding\x20new\n\x20addresses\
    \x20and\x20avoiding\x20collision\x20between\x20different\x20wallets\n\n\
    \x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03\x11\r\x15\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x11\x16\
    !\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x11$%\n+\n\x04\x04\0\x02\x04\x12\
    \x03\x13\x04%\x1a\x1e\x20Actual\x20entries\x20in\x20the\x20wallet\n\n\
    \x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x13\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x03\x13\r\x18\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x13\x19\
    \x20\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x13#$\n\xd0\x01\n\x04\x04\0\
    \x02\x05\x12\x03\x17\x04\x19\x1a\xc2\x01\x20Sequence\x20for\x20entry\x20\
    ids\x20in\x20that\x20wallet.\x20Incremented\x20each\x20time\x20a\x20new\
    \x20entry\x20added,\x20and\x20used\n\x20as\x20the\x20id\x20that\x20new\
    \x20entry.\x20Using\x20this\x20sequence,\x20if\x20entry\x20gets\x20delet\
    ed\x20its\x20id\x20is\x20not\x20going\n\x20to\x20be\x20reused\n\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03\x17\x0b\x14\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x17\x17\x18\n\
    F\n\x04\x04\0\x02\x06\x12\x03\x1a\x04\x1a\x1a9\x20creation\x20date\x20of\
    \x20the\x20wallet,\x20millis\x20since\x20epoch,\x20in\x20UTC\n\n\x0c\n\
    \x05\x04\0\x02\x06\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\
    \x12\x03\x1a\x0b\x15\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x1a\x18\x19\n\
    =\n\x02\x04\x01\x12\x04\x1e\0#\x01\x1a1\x20Reserved\x20index\x20on\x20a\
    \x20HD\x20path,\x20an\x20x\x20from\x20m/44'/x'\n\n\n\n\x03\x04\x01\x01\
    \x12\x03\x1e\x08\x10\n)\n\x04\x04\x01\x02\0\x12\x03\x20\x04\x16\x1a\x1c\
    \x20reference\x20to\x20a\x20source\x20seed\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x20\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x20\n\x11\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x20\x14\x15\n*\n\x04\x04\x01\x02\
    \x01\x12\x03\"\x04\x1a\x1a\x1d\x20reserved\x20HD\x20Path\x20account\x20i\
    d\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\"\x0b\x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\"\
    \x18\x19\n\x1b\n\x02\x04\x02\x12\x04&\09\x01\x1a\x0f\x20Entry\x20details\
    \n\n\n\n\x03\x04\x02\x01\x12\x03&\x08\x13\n/\n\x04\x04\x02\x02\0\x12\x03\
    (\x04\x12\x1a\"\x20id\x20to\x20reference\x20entry\x20per\x20wallet\n\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03(\x04\n\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03(\x0b\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03(\x10\x11\ne\n\
    \x04\x04\x02\x02\x01\x12\x03*\x04\x1d\x1aX\x20Associated\x20blockchain;\
    \x20entry\x20may\x20have\x20multiple\x20different\x20assets\x20on\x20a\
    \x20single\x20blockchain\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03*\x04\
    \n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03*\x0b\x18\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03*\x1b\x1c\nM\n\x04\x04\x02\x02\x02\x12\x03,\x04\x1e\
    \x1a@\x20true\x20if\x20entry\x20is\x20disabled\x20for\x20receiving,\x20i\
    .e.\x20only\x20for\x20sending\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03,\
    \x04\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03,\t\x19\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03,\x1c\x1d\n,\n\x04\x04\x02\x02\x03\x12\x03.\x04\
    \x18\x1a\x1f\x20public\x20address,\x20for\x20reference\n\n\x0c\n\x05\x04\
    \x02\x02\x03\x06\x12\x03.\x04\x0b\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03.\x0c\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03.\x16\x17\n\"\n\x04\
    \x04\x02\x02\x04\x12\x030\x04\x15\x1a\x15\x20user\x20assigned\x20label\n\
    \n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x030\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x04\x01\x12\x030\x0b\x10\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x030\x13\
    \x14\n!\n\x04\x04\x02\x08\0\x12\x042\x045\x05\x1a\x13\x20link\x20to\x20a\
    ctual\x20PK\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x032\n\x11\n\x0b\n\x04\
    \x04\x02\x02\x05\x12\x033\x08\x1b\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\
    \x033\x08\x0e\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x033\x0f\x16\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x033\x19\x1a\n\x0b\n\x04\x04\x02\x02\x06\
    \x12\x034\x08\x18\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x034\x08\r\n\x0c\n\
    \x05\x04\x02\x02\x06\x01\x12\x034\x0e\x13\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x034\x16\x17\nE\n\x04\x04\x02\x02\x07\x12\x038\x04\x1a\x1a8\x20\
    creation\x20date\x20of\x20the\x20entry,\x20millis\x20since\x20epoch,\x20\
    in\x20UTC\n\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x038\x04\n\n\x0c\n\x05\
    \x04\x02\x02\x07\x01\x12\x038\x0b\x15\n\x0c\n\x05\x04\x02\x02\x07\x03\
    \x12\x038\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
